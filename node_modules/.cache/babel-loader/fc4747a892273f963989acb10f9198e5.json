{"ast":null,"code":"var _jsxFileName = \"/home/kev/springboard/exercises/react-history-demo/react-jokes-classes/src/JokeList.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass JokeList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: []\n    };\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n  }\n  /* at mount, get jokes */\n  componenDidMount() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n  }\n  componentDidUpdate() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n  }\n  async getJokes() {\n    try {\n      // load jokes one at a time, adding not-yet-seen jokes\n      let jokes = this.state.jokes;\n      let jokeVotes = JSON.parse(window.localStorage.getItem(\"jokeVotes\") || \"{}\");\n      let seenJokes = new Set(jokes.map(j => j.id));\n      while (jokes.length < this.props.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let {\n          status,\n          ...joke\n        } = res.data;\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          jokeVotes[joke.id] = jokeVotes[joke.id] || 0;\n          jokes.push({\n            ...joke,\n            votes: jokeVotes[joke.id],\n            locked: false\n          });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n      this.setState({\n        jokes\n      });\n      window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  /* empty joke list, set to loading state, and then call getJokes */\n\n  generateNewJokes() {\n    this.setState(st => ({\n      jokes: st.jokes.filter(j => j.locked)\n    }));\n  }\n  /* change vote for this id by delta (+1 or -1) */\n\n  vote(id, delta) {\n    let jokeVotes = JSON.parse(window.localStorage.getItem(\"jokeVotes\"));\n    jokeVotes[id] = (jokeVotes[id] || 0) + delta;\n    window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    this.setState(st => ({\n      jokes: st.jokes.map(j => j.id === id ? {\n        ...j,\n        votes: j.votes + delta\n      } : j)\n    }));\n  }\n  render() {\n    let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"JokeList\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: this.generateNewJokes,\n        children: \"Get New Jokes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: this.resetVotes,\n        children: \"Reset Vote Counts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), sortedJokes.map(j => /*#__PURE__*/_jsxDEV(Joke, {\n        text: j.joke,\n        id: j.id,\n        votes: j.votes,\n        vote: this.vote\n      }, j.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)), sortedJokes.length < this.props.numJokesToGet ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-4x fa-spinner fa-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n\n//   /* get jokes if there are no jokes */\n\n//   useEffect(function () {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n//   /* empty joke list and then call getJokes */\n\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n\n//   return null;\n\n// }\nJokeList.defaultProps = {\n  numJokesToGet: 10\n};\nexport default JokeList;","map":{"version":3,"names":["React","Component","axios","Joke","jsxDEV","_jsxDEV","JokeList","constructor","props","state","jokes","generateNewJokes","bind","vote","componenDidMount","length","numJokesToGet","getJokes","componentDidUpdate","jokeVotes","JSON","parse","window","localStorage","getItem","seenJokes","Set","map","j","id","res","get","headers","Accept","status","joke","data","has","add","push","votes","locked","console","log","setState","setItem","stringify","e","st","filter","delta","render","sortedJokes","sort","a","b","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","resetVotes","text","defaultProps"],"sources":["/home/kev/springboard/exercises/react-history-demo/react-jokes-classes/src/JokeList.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n\nclass JokeList extends Component {\n  static defaultProps = {\n    numJokesToGet: 10\n  };\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      jokes: []\n    }\n\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n\n  }\n  /* at mount, get jokes */\n  componenDidMount() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n\n  }\n  componentDidUpdate() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n\n  }\n  async getJokes() {\n    try {\n      // load jokes one at a time, adding not-yet-seen jokes\n      let jokes = this.state.jokes;\n      let jokeVotes = JSON.parse(\n        window.localStorage.getItem(\"jokeVotes\") || \"{}\"\n      );\n      let seenJokes = new Set(jokes.map(j => j.id));\n\n      while (jokes.length < this.props.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let { status, ...joke } = res.data;\n\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          jokeVotes[joke.id] = jokeVotes[joke.id] || 0;\n          jokes.push({ ...joke, votes: jokeVotes[joke.id], locked: false });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n\n      this.setState({ jokes });\n      window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  /* empty joke list, set to loading state, and then call getJokes */\n\n  generateNewJokes() {\n    this.setState(st => ({ jokes: st.jokes.filter(j => j.locked) }));\n  }\n  /* change vote for this id by delta (+1 or -1) */\n\n  vote(id, delta) {\n    let jokeVotes = JSON.parse(window.localStorage.getItem(\"jokeVotes\"));\n    jokeVotes[id] = (jokeVotes[id] || 0) + delta;\n    window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    this.setState(st => ({\n      jokes: st.jokes.map(j =>\n        j.id === id ? { ...j, votes: j.votes + delta } : j\n      )\n    }));\n  }\n\n  render() {\n    let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n\n    return (\n      <div className=\"JokeList\">\n        <button\n          className=\"JokeList-getmore\"\n          onClick={this.generateNewJokes}\n        >\n          Get New Jokes\n        </button>\n        <button className=\"JokeList-getmore\" onClick={this.resetVotes}>\n          Reset Vote Counts\n        </button>\n\n        {sortedJokes.map(j => (\n          <Joke\n            text={j.joke}\n            key={j.id}\n            id={j.id}\n            votes={j.votes}\n            vote={this.vote}\n\n          />\n        ))}\n\n        {sortedJokes.length < this.props.numJokesToGet ? (\n          <div className=\"loading\">\n            <i className=\"fas fa-4x fa-spinner fa-spin\" />\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n\n//   /* get jokes if there are no jokes */\n\n//   useEffect(function () {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n//   /* empty joke list and then call getJokes */\n\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n\n//   return null;\n\n// }\n\nexport default JokeList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}